/* eslint-disable @next/next/no-img-element */
import Head from "next/head";
// import Image from "next/image";
import axios from "axios";
import { useState } from "react";
import { getCookies, getCookie, setCookies, removeCookies } from "cookies-next";

export default function Home({ data }) {
	var dis = false;

	const initialState = {
		bet: "",
	};
	getCookie("sold") > Number("-5") ? null : setCookies("sold", 500);
	getCookie("sold");
	let sold;
	const [betData, setbetData] = useState(initialState);
	function setbetDatax2() {
		if (Number(sold) > Number(bet) * 2) setbetData({ bet: bet * 2 });
		else alert("Nu ai bani bobita");
	}
	const { bet } = betData;
	sold = Number(getCookie("sold"));

	const handleChangeInput = (e) => {
		const { name, value } = e.target;
		setbetData({ ...betData, [name]: value });
	};
	const [button, setButton] = useState(false);
	const [deck__id, setId] = useState(data.deck_id);

	const [cards, setCards] = useState([]);
	const [cardssarr, setcardsarr] = useState([]);

	const [cardsCasa, setCardsCasa] = useState([]);
	const [cardssarrCasa, setcardsarrCasa] = useState([]);

	function timeHit() {
		hit();
	}
	function timeHitCasa() {
		hitCasa();
	}
	async function hit() {
		setButton(true);
		await axios
			.get(`https://deckofcardsapi.com/api/deck/${deck__id}/draw/?count=1`)
			.then(function (response) {
				setCards(response.data.cards);
				// console.log(response.data.cards);
			});
		cardssarr.push(cards[0]);
		setButton(false);

		test2();
	}

	async function hitCasa() {
		setButton(true);
		await axios
			.get(`https://deckofcardsapi.com/api/deck/${deck__id}/draw/?count=1`)
			.then(function (response) {
				setCardsCasa(response.data.cards);
				// console.log(response.data.cards);
			});
		cardssarrCasa.push(cardsCasa[0]);
		setButton(false);

		test3();
	}

	let str = "0";

	for (let i = 0; i < cardssarr.length; i++) {
		if (i == 0);
		else if (
			cardssarr[i].value == "JACK" ||
			cardssarr[i].value == "QUEEN" ||
			cardssarr[i].value == "KING"
		) {
			str = Number(str) + Number(10);
		} else if (cardssarr[i].value === "ACE" && Number(str) > Number(10)) {
			str = Number(str) + Number(1);
		} else if (cardssarr[i].value === "ACE" && Number(str) < Number(11)) {
			str = Number(str) + Number(11);
			var strA = Number(1);
		} else if (str > 21 && strA == Number(1)) {
			str = Number(str) + Number(1);
		} else str = Number(str) + Number(cardssarr[i].value);
		var dis = true;
	}

	let str2 = "0";
	for (let i = 1; i < cardssarrCasa.length; i++) {
		if (
			cardssarrCasa[i].value == "JACK" ||
			cardssarrCasa[i].value == "QUEEN" ||
			cardssarrCasa[i].value == "KING"
		) {
			str2 = Number(str2) + Number(10);
		} else if (cardssarrCasa[i].value === "ACE" && Number(str2) > Number(10)) {
			str2 = Number(str2) + Number(1);
		} else if (cardssarrCasa[i].value === "ACE" && Number(str2) < Number(11)) {
			str2 = Number(str2) + Number(11);
			var varA2 = Number(1);
		} else if (str2 > 21 && strA == Number(1)) {
			str2 = Number(str2) + Number(1);
		} else str2 = Number(str2) + Number(cardssarrCasa[i].value);
	}

	function test2() {
		if (Number(str) > Number(21)) {
			alert(`You Lost ${bet} $`);
			setcardsarr([]);
			setcardsarrCasa([]);
			let cook = Number(sold) - Number(bet);
			setCookies("sold", cook);
		} else if (Number(str) == Number(21)) {
			alert(`You Wom ${Number(bet * 2)} $`);
			sold = sold + Number(bet);
			setcardsarr([]);
			setcardsarrCasa([]);
			let cook = Number(sold) + Number(bet);

			setCookies("sold", cook);
		}
	}
	function test3() {
		test2();
		if (Number(str2) > Number(21)) {
			alert(`You Won ${bet} $$`);
			setCookies("sold", cook);
			setcardsarr([]);
			setcardsarrCasa([]);
			let cook = Number(sold) + Number(bet);
			setCookies("sold", cook);
		} else if (Number(str2) > Number(str)) {
			alert(`You Lost ${bet} $`);
			setcardsarr([]);
			setcardsarrCasa([]);
			let cook = Number(sold) - Number(bet);
		} else if (Number(str2) == Number(str)) {
			alert(`Draw, you got ${bet} $ back `);
			setcardsarr([]);
			setcardsarrCasa([]);
			// let cook = Number(sold) - Number(bet);
		}
	}
	return (
		<div>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
			</Head>

			<div className="p-1 border-2 rounded-b-xl border-green-900 container  bg-emerald-700 mx-auto  h-128">
				<div className="flex flex-row h-8">
					<div className="basis-1/3 ml-3 whitespace-nowrap font-semibold">
						Sold: {sold}$
					</div>
					<div className="mr-1 font-semibold">Bet: </div>

					<div className="mb-3 xl:w-96">
						<input
							value={bet}
							name="bet"
							onChange={handleChangeInput}
							required
							type="number"
							default="0"
							disabled={dis}
							step="50"
							className="

							
        form-control
        block
        w-full
        p-0/25
        text-base
        font-semibold
        text-red-800
        bg-white bg-clip-padding
        border border-solid border-gray-500
        rounded
        transition
        ease-in-out
        m-0 pl-1
        focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none
      "
							id="exampleFormControlInput1"
							placeholder="Example label"
						/>
					</div>
					<div className="basis-1/4 flex grow justify-end ">
						<div className=" ml-2  item mr-2 font-semibold">
							{" "}
							Profit:{sold - 500}$
						</div>
					</div>
				</div>
				<div className="grid justify-items-center grid-cols-2 p-1 ">
					<p className=" pr-8 text-xl font-semibold text-dark-800 ">
						Player <span className="text-2xl ">: {str} </span>
					</p>
					<p className="pr-24 text-xl font-semibold text-red-700">
						Dealer <span className="text-2xl "> {str2} </span>
					</p>
				</div>
				<div className=" grid justify-items-center grid-cols-2 pt-3 h-[25rem] mr-16">
					<div className="w-28">
						{cardssarr.map((item, x) =>
							x > 0 ? (
								<div key={x}>
									<img
										className="imagej"
										src={`${cardssarr[x].image}`}
										alt="cartejoc"
									></img>
									<style jsx>{`
										.imagej {
											transform: translate(
												${0.7 * (x - 1)}rem,
												${-8 * (x - 1)}rem
											);
										}
									`}</style>
								</div>
							) : null
						)}
					</div>

					<div className=" w-28 ">
						{cardssarrCasa.map((item, x) =>
							x > 0 ? (
								<div key={x}>
									<img
										className="imagej"
										src={`${cardssarrCasa[x].image}`}
										alt="cartejoc"
									></img>
									<style jsx>{`
										.imagej {
											transform: translate(
												${0.7 * (x - 1)}rem,
												${-8 * (x - 1)}rem
											);
										}
									`}</style>
								</div>
							) : null
						)}
					</div>
				</div>
				<div className="grid justify-items-center grid-cols-3 p-1 ">
					<button
						onClick={setbetDatax2}
						className="w-24 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700 rounded"
					>
						Double
					</button>

					<button
						disabled={button}
						onClick={timeHitCasa}
						className="w-24 bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 border border-blue-700 rounded"
					>
						Stand
					</button>

					<button
						disabled={button}
						onClick={timeHit}
						className="w-24 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 border border-blue-700 rounded"
					>
						Hit
					</button>
				</div>
			</div>

			{/* <ul className="m-3">
				<div className="flex  text-xl pl-10">Rules:</div>
				<span className="pl-10">1: Click on Hit x2 times to start</span>
				<br></br>
				<span className="pl-10">
					2: Each participant attempts to beat the dealer by getting a count as
					close to 21 as possible, without going over 21.
				</span>
				<br></br>
				<span className="pl-10">3: It is up to each individual player if an ace is worth 1 or 11. Face cards are 10 and any other card is its pip value.</span>
				<br></br>
				<span className="pl-10">4: Before the deal begins, each player places a bet, in $, in front of them in the designated area. Minimum and maximum limits are established on the betting, and the general limits are from $1 to $500.</span>
				<br></br>
			</ul> */}
			<div className="flex justify-center">
				<ul className="mt-3 bg-white container rounded-lg border border-gray-600  text-gray-900">
					<li className="px-4 py-2 place-content-center  border-b border-gray-200 w-full rounded-t-lg bg-emerald-700 text-white">
						General rules
					</li>
					<li className="px-4 py-2 border-b border-gray-200 w-full">
						<span className="text-green-800 text-lg border-r-2 mr-1 border-gray-600">1 </span>Click on Hit x2
						times to start and x2 on Stand to draw cards for dealer.
					</li>
					<li className="px-4 py-2 border-b border-gray-200 w-full">
					<span className="text-green-800 text-lg border-r-2 mr-1 border-gray-600">2 </span>
						{" "}
					 Each participant attempts to beat the dealer by getting a count
						as close to 21 as possible, without going over 21.
					</li>
					<li className="px-4 py-2 border-b border-gray-200 w-full">
					<span className="text-green-800 text-lg border-r-2 mr-1 border-gray-600"> 3 </span>
					 Before the deal begins, each player places a bet, in $, in front
						of them in the designated area. Minimum and maximum limits are
						established on the betting, and the general limits are from $1 to
						$500.
					</li>
					
					<li className="px-4 py-2 w-full rounded-b-lg">	<span className="text-green-800 text-lg border-r-2 mr-1 border-gray-600"> 4 </span>And a fifth one</li>
				</ul>
			</div>
		</div>
	);
}
export async function getServerSideProps() {
	const res = await axios.get(
		"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1"
	);
	const data = res.data;

	return { props: { data } };
}
